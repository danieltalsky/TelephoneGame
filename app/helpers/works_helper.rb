require 'csv'

module WorksHelper
  
  # hacky way to get a medium-resized jpeg path from the original work
  def get_resized_jpg_path(fullsize_path)
    return_path = fullsize_path
    replacer_array = {
      "/workrepresentations/" => "/workrepresentations/540/",
      ".jpg" => "_540.jpg",
      ".png" => "_540.jpg"
    }
    replacer_array.each do |find, replace|
      return_path = return_path.sub find, replace
    end    
    return return_path
  end
  
  # hacky way to get a full-resized jpeg path from the original work
  def get_fullsized_jpg_path(fullsize_path)
    return_path = fullsize_path
    replacer_array = {
      "/workrepresentations/" => "/workrepresentations/960/",
      ".jpg" => "_960x620.jpg",
      ".png" => "_960x620.jpg"
    }
    replacer_array.each do |find, replace|
      return_path = return_path.sub find, replace
    end    
    return return_path
  end  
  
  # using cloudinary service to get resized gif
  def get_resized_gif_img(orig_url)
    uri = URI.parse(orig_url)
    cl_image_tag(File.basename(uri.path), :width=>540, :height=>540, :crop=>:scale)
  end
  
  # using cloudinary service to get resized gif
  def get_fullsized_gif_img(orig_url)
    cl_image_tag("0121_0046_Gertz_Visual_rjium4.gif", :width=>960, :height=>960, :crop=>:scale)
  end
  
  def position_by_top_or_bottom(position)
    highest_position_that_needs_adjustment = 400
    if position.to_i > lowest_position_to_use_top
      return 'bottom'
    end
  end
  
  # if boxes are too low to the bottom they need to be moved up
  def adjust_x_coord_for_height(height)
    y_coords_below_this_need_adjustment = 500
    if height.to_i > y_coords_below_this_need_adjustment
      return height - 200
    else 
      return height     
    end
  end
 
  # hacky way to get the coordinates for the image map for each work id
  def get_coordinates_for_work_id(work_id)
    
    coordinate_data = get_coordinate_data()
    coordinate_data.each do |data|
      if data[0].strip.to_i == work_id          
        return [data[1], data[2]]
      end
    end
    return [1,1]    
  end
  
  def get_coordinate_data()
    CSV.parse(<<-ENDDATA
    1,400,390
    2,408,356
    3,408,424
    4,373,413
    5,432,328
    6,351,440
    7,431,453
    8,388,459
    9,357,295
    10,453,299
    11,505,381
    12,261,377
    13,358,257
    14,458,263
    15,511,305
    16,523,323
    17,540,382
    18,229,423
    19,226,385
    20,232,343
    21,289,255
    22,335,229
    23,357,220
    24,397,215
    25,379,181
    26,395,181
    27,410,181
    28,452,223
    29,473,231
    30,490,240
    31,509,252
    32,527,271
    33,539,284
    34,549,298
    35,206,470
    36,197,442
    37,191,405
    38,190,392
    39,191,374
    40,196,343
    41,203,320
    42,228,269
    43,254,239
    44,294,209
    45,314,199
    46,340,189
    47,421,146
    48,434,148
    49,382,145
    50,395,145
    51,357,149
    52,463,190
    53,478,195
    54,570,265
    55,167,465
    56,162,448
    57,159,432
    58,208,239
    59,231,214
    60,248,198
    61,285,173
    62,297,168
    63,307,163
    64,328,194
    65,540,407
    66,138,485
    67,206,189
    68,218,178
    69,230,168
    70,241,159
    71,428,182
    72,447,186
    73,188,512
    74,179,496
    75,173,481
    76,131,468
    77,127,450
    78,167,179
    79,175,170
    80,184,161
    81,195,150
    82,240,118
    83,258,109
    84,289,132
    85,414,111
    86,428,112
    87,557,313
    88,516,216
    89,564,329
    90,207,141
    91,155,391
    92,527,222
    93,535,230
    94,156,375
    95,158,356
    96,493,441
    97,468,469
    98,443,486
    99,418,494
    100,402,495
    101,381,493
    102,516,468
    103,505,483
    104,490,497
    105,569,345
    106,545,238
    107,160,341
    108,574,365
    109,574,396
    110,153,142
    111,165,131
    112,224,88
    113,572,418
    114,160,534
    115,329,120
    116,164,327
    117,165,237
    118,331,469
    119,121,402
    120,150,518
    121,130,315
    122,371,147
    123,123,352
    124,315,451
    125,263,187
    126,331,154
    127,344,151
    128,589,297
    129,478,507
    130,594,308
    131,126,335
    132,598,320
    133,315,501
    134,536,424
    135,463,515
    136,124,434
    137,143,501
    138,377,529
    139,303,491
    140,531,440
    141,175,123
    142,476,158
    143,606,345
    144,610,398
    145,359,524
    146,121,385
    147,178,221
    148,409,76
    149,156,413
    150,275,179
    151,609,371
    152,344,518
    153,409,530
    154,451,520
    155,546,486
    156,329,509
    157,290,477
    158,393,530
    159,437,525
    160,99,481
    161,491,201
    162,490,162
    163,503,532
    164,185,114
    165,609,411
    166,94,463
    167,505,208
    168,457,555
    169,489,540
    170,188,208
    171,195,256
    172,195,64
    173,524,454
    174,607,427
    175,356,114
    176,148,579
    177,196,106
    178,610,385
    179,590,235
    180,643,359
    181,303,128
    182,645,378
    183,424,528
    184,135,111
    185,473,549
    186,280,462
    187,559,463
    188,570,433
    189,485,124
    190,583,287
    191,279,516
    192,498,128
    193,553,475
    194,529,509
    195,262,146
    196,366,561
    197,444,114
    198,503,168
    199,306,538
    200,368,112
    201,140,566
    202,536,187
    203,540,496
    204,272,446
    205,561,205
    206,516,521
    207,576,275
    208,379,111
    209,390,110
    210,547,194
    211,532,552
    212,449,150
    213,172,80
    214,61,477
    215,464,154
    216,149,201
    217,116,528
    218,569,515
    219,145,101
    220,504,572
    221,220,50
    222,106,505
    223,592,476
    224,513,96
    225,129,551
    226,488,581
    227,643,424
    228,485,87
    229,530,103
    230,56,453
    231,521,137
    232,498,91
    233,602,333
    234,403,564
    235,638,446
    236,258,492
    237,276,139
    238,138,62
    239,90,445
    240,535,145
    241,515,174
    242,136,296
    243,144,276
    244,248,477
    245,124,606
    246,351,79
    247,675,332
    248,553,247
    249,554,532
    250,543,543
    251,444,78
    252,457,81
    253,605,257
    254,318,159
    255,370,77
    256,243,77
    257,343,116
    258,264,68
    259,105,578
    260,122,417
    261,175,294
    262,407,145
    263,352,185
    264,520,563
    265,420,76
    266,68,499
    267,95,563
    268,112,592
    269,603,442
    270,608,358
    271,645,396
    272,615,273
    273,447,44
    274,252,152
    275,158,188
    276,183,277
    277,565,448
    278,532,597
    279,402,110
    280,472,83
    281,365,183
    282,218,132
    283,561,256
    284,459,116
    285,117,184
    286,509,133
    287,354,595
    288,575,218
    289,121,369
    290,86,544
    291,86,390
    292,127,233
    293,624,290
    294,129,168
    295,237,450
    296,86,375
    297,526,181
    298,229,126
    299,159,46
    300,432,77
    301,143,154
    302,473,120
    303,240,40
    304,55,561
    305,316,123
    306,514,607
    307,87,428
    308,86,412
    309,486,51
    310,383,76
    311,396,75
    312,137,218
    313,153,258
    314,169,309
    315,183,31
    ENDDATA
    )
  end
  
end
